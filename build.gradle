plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'manage'
//version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}


dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	implementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
//	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

ext {
	snippetsDir = file('build/generated-snippets')
	restDocsPath = file('src/main/resources/static/docs')
}

test {
	useJUnitPlatform()
	// 테스트 실행 시 콘솔에 표준 출력 및 표준 에러를 보여줍니다.
	testLogging {
		showStandardStreams = true
		// 또는 아래와 같이 이벤트를 설정하여 특정 단계에서 로그를 출력할 수 있습니다.
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	outputs.dir snippetsDir
}

asciidoctor {
	dependsOn test

	delete restDocsPath
	delete "${asciidoctor.outputDir}"

	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
}

tasks.register('copyApiDocs', Copy) {
	dependsOn asciidoctor

	from file("${asciidoctor.outputDir}")
	into file("${restDocsPath}")
}

bootJar {
	dependsOn copyApiDocs
	from ("${asciidoctor.outputDir}") {
		into "${restDocsPath}"
	}
}

build {
	dependsOn copyApiDocs
}
